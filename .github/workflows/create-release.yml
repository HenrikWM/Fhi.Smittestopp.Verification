name: Create release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  DOTNET_VERSION: 3.1.301
  OCTOPUS_SERVER: ${{ secrets.API_OCT_NHN_NO_SERVER }}
  OCTOPUS_APIKEY: ${{ secrets.API_OCT_NHN_NO_KEY }}
  OCTOPUS_SPACE_NAME: ${{ secrets.API_OCT_NHN_NO_SPACE }}
  OCTOPUS_PROJECT_NAME: Verification
  OCTOPUS_ENVIRONMENT_NAME: Test

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    # Job setup
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # Build, test and publish app
    - name: Install dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: Test
      run: dotnet test --no-restore --verbosity normal
    - name: Publish
      run: dotnet publish Fhi.Smittestopp.Verification.Server --configuration Release --no-build --output published-app

    # Create release with published app artifact
    - name: Create published app zip
      run: cd published-app && zip -r ../Fhi.Smittestopp.Verification.Server.zip *
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: ${{ contains(github.ref, '-') }} # Prerelease if vX.Y.Z-<any-suffix>
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./Fhi.Smittestopp.Verification.Server.zip
        asset_name: Fhi.Smittestopp.Verification.Server.zip
        asset_content_type: application/zip

    # Create octopus package
    - name: Install Octopus CLI
      run: |
        sudo apt update && sudo apt install --no-install-recommends gnupg curl ca-certificates apt-transport-https && \
        curl -sSfL https://apt.octopus.com/public.key | sudo apt-key add - && \
        sudo sh -c "echo deb https://apt.octopus.com/ stable main > /etc/apt/sources.list.d/octopus.com.list" && \
        sudo apt update && sudo apt install octopuscli 

    # Set PACKAGE_VERSION as: refs/tags/v0.1.2 => 0.1.2
    - name: Set version env
      id: setVersion
      run: |
        vn=$(echo ${{ github.ref }} | cut -dv -f2)
        echo "::set-output name=pckVersion::$vn"

    - name: Package and Push to Octopus
      run: |
        octo pack --id="Fhi.Smittestopp.Verification.Server" --format="Zip" --version="${{steps.setVersion.outputs.pckVersion}}" --basePath="./published-app" --outFolder="./packages"
        octo push --package="./packages/Fhi.Smittestopp.Verification.Server.${{steps.setVersion.outputs.pckVersion}}.zip" --server="$OCTOPUS_SERVER" --apiKey="$OCTOPUS_APIKEY" --space="$OCTOPUS_SPACE_NAME"

    - name: Create and Deploy Release
      run: octo create-release --project="$OCTOPUS_PROJECT_NAME" --packageVersion="${{steps.setVersion.outputs.pckVersion}}" --releaseNumber="${{steps.setVersion.outputs.pckVersion}}" --server="$OCTOPUS_SERVER" --apiKey="$OCTOPUS_APIKEY" --space="$OCTOPUS_SPACE_NAME" --deployTo="$OCTOPUS_ENVIRONMENT_NAME"